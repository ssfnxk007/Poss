<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCwsIMnJycbHp6
        erFwcG+/bm5txW1tbcVtbGzHbWxsyWxsbMlsbGvJbGxryWxsa8lsbGvJbGxryWxsbMltbGzJbW1syW1t
        bMVubm3Fb25uw3Nzc7mLi4uVs7OzKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwsLCDIaG
        hbFZWFL9bm5l/3t7c/+FhoD/kJGN/5qbl/+jpKH/q6yq/7Kzsf+4uLb/urq4/7m5uP+1trT/r6+u/6eo
        pv+eoJz/lZeS/4uMhv+Bgnv/dnVt/19eVv9qaWfnra2tNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACjo6NiVlVP/3t7bP+Li4D/m5yS/6utpf+6vLj/yMvI/9bY1v/i5OL/7O3s//X29f/8/Pz/+fr5//Hy
        8f/n6Oj/3N/d/8/Rz//BxMH/np+d/4iIhf+YmpP/hIR3/11cUv9+fn27y8vLBAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIiIiKNVVEr/fHtt/4yMgf+cnZP/q62m/7q9uP/Jy8j/1tnW/+Lk4//s7e3/9vf2//39
        /P/6+vr/8vLy/+jp6P/d393/0NLP/73Avf9MS0j/amlm/2hoY/+Eg3b/bWxf/2NjYue7u7sMAAAAAAAA
        AAAAAAAAAAAAAAAAAADd3d0Af39/u1NSSP99fG7/mJmP/6qrov+3ubL/xMbC/9DS0P/c3tz/5ufm/+/v
        7//3+Pf//f38//r7+v/z9PP/6+zr/+Hj4v/W2Nb/ys3J/6+xrP+QkYv/oaGY/4iIe/9ubF//XV1b77Oz
        sxAAAAAAAAAAAAAAAAAAAAAAAAAAANvb2wJ+fn3BWlpQ/8zNyP/Y2tf/1dfU/9TW0//T1dL/0tTQ/9DS
        zv/O0Mz/zM3K/8rLx//HyMT/xMW//8DBu/+8vbb/uLiy/7S0rf+vr6f/q6qh/6alm/+hoJf/ra2l/4eG
        fP9dXVvzsbGxEAAAAAAAAAAAAAAAAAAAAAAAAAAA29vbAnx8fMGEhH//nJyS/42Ngv+cnZP/q62m/7q9
        uP/Iy8j/1djV/+Hj4v/r7Oz/9fX1//v8+//4+fj/8PHw/+bo5//c3tz/z9HO/8HEwP+ytK7/o6Sc/5OU
        if+AgHL/h4Z7/11dW/OwsLAQAAAAAAAAAAAAAAAAAAAAAAAAAADb29sCe3t7wWZmXv97emz/jIyB/5yd
        k/+rrab/ur24/8nLyP/W2db/4uTj/+zt7f/29/b//f38//r6+v/y8vL/6Ono/93f3f/Q0s//wsXB/7O1
        r/+jpZ3/lJSK/4SEdv9ycWP/XV1b87CwsBIAAAAAAAAAAAAAAAAAAAAAAAAAANra2gJ8e3vBWFdO/3x7
        bf+Li4D/m5yS/6utpf+6vLj/yMvI/9bY1v/i5OL/7O3t//b29v/9/fz/+vr6//Hy8v/n6ej/3N/d/8/S
        z//BxMD/s7Wv/6OlnP+UlIn/hYR3/3FwYv9dXVv1sLCwEgAAAAAAAAAAAAAAAAAAAAAAAAAA2traAnx8
        fMNYV07/k5OH/8TEv//Pz8v/1dbT/9vc2v/h4uH/5ufm/+rr6v/u7+7/8fLx//Pz8v/x8vD/7e7s/+jp
        5//j5OL/3N3b/9bX1P/P0Mv/x8jD/8DAuv+pqaD/cnFj/11dW/WwsLASAAAAAAAAAAAAAAAAAAAAAAAA
        AADa2toCfHx8w3Jyav/U1dL/triy/7m7tf+/wb3/xcfE/8rNyv/P0c//0tXS/9XX1P/X2db/2NjV/9PV
        0f/Nzsn/xcbB/7y9uP+ys63/qKmi/52elf+Skof/h4Z6/4mIfP+YmI7/XV1b9bCwsBIAAAAAAAAAAAAA
        AAAAAAAAAAAAANra2gJ7e3vDhYWA/4GAcv+LjIH/nJ2T/6utpv+6vbj/yMvI/9bY1v/i5OL/7O3t//b2
        9v/8/fz/+vr5//Hy8f/n6ej/3N/d/8/Sz//BxMD/s7Wv/6OlnP+UlIn/hIR2/3x7b/9eXl31sLCwEgAA
        AAAAAAAAAAAAAAAAAAAAAAAA2traAnx8fMNdXFL/fHts/4yMgf+cnZP/q62m/7q9uP/Jy8j/1tnW/+Lk
        4//s7e3/9vf2//39/P/6+vr/8vLy/+jp6P/d393/0NLP/8LFwf+zta//o6Wd/5SUiv+FhHf/cnBi/11d
        W/WwsLASAAAAAAAAAAAAAAAAAAAAAAAAAADa2toCfHx8w1pZT/98e2z/kJCF/6ChmP+vsar/vcC7/8vN
        yv/Y2tj/4+Xk/+3u7v/29/b//Pz8//n6+f/y8/L/6Orp/97g3//S1NH/xMfD/7a4sv+nqaH/mZmP/4WF
        d/9xcGL/XV1b9bCwsBIAAAAAAAAAAAAAAAAAAAAAAAAAANra2gJ8fHzDXV1T/8DAuv/l5uT/5efl/+Tl
        5P/i4+L/4OLg/97f3v/c3dv/2dvY/9bX1P/T09D/z9DM/8zNyP/JysT/xcXA/8HBu/+9vbb/uLmx/7S0
        q/+wr6f/s7Or/4OCdv9dXVv1sLCwEgAAAAAAAAAAAAAAAAAAAAAAAAAA2traAnt7e8GMjIf/5efm/+Di
        4f/c3t3/19rY/9PV0v/O0c7/ycvJ/8rMyv/S1NH/1tjV/9XX1P/Jy8j/ubu3/66wqf+io5r/lJSJ/4yM
        gf+FhXj/f35w/3h2aP9wb2D/kI+F/15eXPWwsLASAAAAAAAAAAAAAAAAAAAAAAAAAADb29sCe3t6wZ2e
        nP/n6ef/5Obl/+Di4f/c3t3/xcbE/7i4tv/Hycj/09XU/9PV0//O0c7/ys3K/8bIxf/BxMD/vsG+/8HE
        wP/DxcL/q6ul/46Ng/+FhXj/f35w/3d2aP9ycGP/Xl5c9bCwsBIAAAAAAAAAAAAAAAAAAAAAAAAAANvb
        2wJ7e3vBn5+e/+rr6//o6ej/4+Xk/62tq//CwsD/297c/9rc2v/W2df/09XT/9HU0f/P0s//ys3K/8XH
        xP/Aw7//vL+7/7i7tf+2uLT/oaGc/4yLgf+FhXn/f35w/3V0Zv9eXVzzsLCwEAAAAAAAAAAAAAAAAAAA
        AAAAAAAA29vbAnx8e8GgoJ7/7u/u/+vs6//Jycf/wMG+/+Pl4//g4uH/3d/e/9PW0//S1NP/3d/d/9PV
        0//Nz83/z9LQ/8PGw//Aw8D/vL+7/7i7tv+ytK7/j46H/4yMgf+FhXn/e3pt/15eXPOxsbEQAAAAAAAA
        AAAAAAAAAAAAAAAAAADc3NwAfX19v6Cgnv/x8vH/7u/v/8zMyv/R0tD/5efm/+Pl4//g4uH/wsPB/9ve
        3P/Y29j/1NbU/8/Sz//Lzsv/vL67/8XIxP/Aw8D/vL+7/7i7tf+VlY7/k5OJ/4yMgf+AgHT/X15d8bKy
        shAAAAAAAAAAAAAAAAAAAAAAAAAAAN7e3gCAgICxoaGf//T19P/y8vL/7u7u/8fHxf/h4uH/5ujm/+Pl
        4//e4N//2tza/97g3v/X2tj/09XT/9DT0P/Lzcv/yMvI/8XHxP/Aw8D/r7Gs/56flv+ampD/k5SJ/4aF
        e/9gYF/rt7e3DgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJGRkY+YmJf/9/j3//T19P/y8vL/7+/v/9zd
        3P/a29r/4eLh/+Pk4//g4uH/3d/e/9rd2//W2df/09XT/8/Sz//Mzsz/yMrI/7u9uf+srqj/pqig/6Ci
        mP+am5H/hIV7/2xrat3CwsIKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsbGxNHR0cvPf397/9/j3//X1
        9f/z8/L/8PDw/+3u7f/n6Of/5Obl/+Tl5f/i5OP/3+Hg/9jb2f/R09H/y87L/8bJxv+/wr7/ury3/7O2
        sP+tr6j/p6mh/56glv9mZmD/kZGRidXV1QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ0NACoqKiWnV1
        dOmCgoD/f358/3x8ev97e3n/enp4/3l5d/93eHX/dnZ0/3V1c/9zdHH/cnJw/3Bwbv9ub2z/bG1q/2tr
        aP9pamb/Z2hk/2ZmYv9oaGT/ZmZj+YiIiKe+vr4OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADX19cAurq6HqSkpFiWlpZylJSUgZOTk4GSkpKBkpKSgZKSkoOTk5ODk5OTg5OTk4OTk5ODk5OTg5OT
        k4OSkpKBkpKSgZKSkoGTk5OBlZWVfJycnGaxsbE6x8fHBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////wAAD/wAAAf8AAAD+AAAA/gAAAP4AAAD+AA
        AA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AA
        AA/wAAAP+AAAH/8AAf////////////////8=
</value>
  </data>
</root>