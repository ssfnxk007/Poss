<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgd4wGVm6BMFNtgDBTbYAwU26AMFJugDBSbYAwUW1/MFJt
        gDBRbYAwUW2AMFFsgDBQa38wUGx/MFBrfzBQbH8wT2x/ME9sfzBPbH8wT2x/MGV4i0ZleItGZXiLRltx
        hDhRa38wUmx/MFNtgDBUbYAwVW2BMFZugTBXcYUWAAAAAHieuDhtmLPnapaw526Zs/dwmrT/bpmz/26Y
        sv9tmLL/bJiy/2yYsf9ql7H/apex/2iWsf9plrH/aZav/2mWrv9plq7/aJWv/2mWsP9qlbD/apaw/2mV
        rv9rlq//bJew/2+atP9wmrX/cZy1/3Kctv9vm7T/cJy173KdtoUAAAAAAAAAAAAAAAAAAAAAgXJWpZGM
        av+70LT/fnQk/66fLv+vny7/i4Et/xtl2/8dcvb/HXL2/ydPh/9cUBD/XVER/11REf9Id4L/YMX4/2LF
        +P9cuef/V04y/1pOLv9hVjb/jIVz/1yClf88qqX/ruDp/3h6fv+CgntyAAAAAAAAAAAAAAAAAAAAAAAA
        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
        2AH///gD//f4B////Af//3gP///4P/////8=
</value>
  </data>
</root>